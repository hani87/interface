package demo;

import java.sql.*;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;

public class Demo1 extends Application  {
	private TableView tableView = new TableView();
	private Connection connection;
	private Statement statement;
	private TextArea taSQLResult = new TextArea();
	private TextArea tasqlCommand = new TextArea();
	private TextField tfUsername = new TextField();
	private TextField tfURL = new TextField();
	private TextField tfAantal = new TextField();
	private PasswordField pfPassword = new PasswordField();
	private ComboBox<String> cboURL = new ComboBox<>();
	private ComboBox<String> cboDriver = new ComboBox<>();
	private Button btExecuteSQL = new Button("Execute SQL Command");
	private Button btUpdate = new Button("Update");
	private Button btVoegBestelling = new Button("Voeg Bestelling toe");
	private Button btVoegArtikel = new Button("Voeg Artikel");
	private Button btClearSQLCommand = new Button("Clear");
	private Button btConnectDB = new Button("Connect to Database");
	private Button btClearSQLResult = new Button("Clear Result");
	private Button btVervers = new Button("Ververs tabel");
	private Button btNieuweKlant = new Button("Maak nieuwe klant");
	private Button btMaakKLanten = new Button("maak klanten aan");
	private Label lblConnectionStatus = new Label("No connection now");
	private BorderPane borderPaneExecutionResult = new BorderPane();
	
	@Override
	public void start(Stage primaryStage) {
		cboURL.getItems().addAll(FXCollections.observableArrayList(
		"jdbc:Mysql://localhost:3306/mydb",
		"jdbc:mysql://liang.armstrong.edu/mydb",
		"jdbc:odbc:exampleMDBDataSource",
	"jdbc:oracle:thin:@liang.armstrong.edu:1521:orcl"));
		 cboURL.getSelectionModel().selectFirst();
		 
		 cboDriver.getItems().addAll(FXCollections.observableArrayList(
				 "com.mysql.jdbc.Driver", "sun.jdbc.odbc.dbcOdbcDriver",
				 "oracle.jdbc.driver.OracleDriver"));
				 cboDriver.getSelectionModel().selectFirst();
		 
				 GridPane gridPane = new GridPane();
				 
				 gridPane.add(cboURL, 1, 0);
				 gridPane.add(cboDriver, 1, 1);
				 gridPane.add(tfUsername, 1, 2);
				 gridPane.add(pfPassword, 1, 3);
				 gridPane.add(new Label("url datasource"), 0, 0);
				 gridPane.add(new Label("Datasource"),0, 1);
				 gridPane.add(new Label("gebruikersnaam"), 0, 2);
				 gridPane.add(new Label("wachtwoord"), 0, 3);
				gridPane.add(new Label("     maak random klanten"),2,0);
				gridPane.add(new Label("     Voer aantal in: "), 2, 1); 
				gridPane.add(tfAantal, 3, 1);
				gridPane.add(btMaakKLanten, 2, 2);
				 HBox hBoxUpdate = new HBox();
				 hBoxUpdate.getChildren().addAll(btVervers, btNieuweKlant, btVoegArtikel,btVoegBestelling);
				
				
				 HBox hBoxConnection = new HBox();
				 hBoxConnection.getChildren().addAll(
				 lblConnectionStatus, btConnectDB);
				 hBoxConnection.setAlignment(Pos.CENTER_RIGHT);
				 VBox vBoxConnection = new VBox(5);
				 vBoxConnection.getChildren().addAll(new Label("Enter Database Information"),
				 gridPane, hBoxConnection, hBoxUpdate);
				 gridPane.setStyle("-fx-border-color: black;");
				 
				 HBox hBoxSQLCommand = new HBox(5);
				 hBoxSQLCommand.getChildren().addAll(
				 btClearSQLCommand, btExecuteSQL, btUpdate);
				 hBoxSQLCommand.setAlignment(Pos.CENTER_RIGHT);
				 	 
				 BorderPane borderPaneSqlCommand = new BorderPane();
				 borderPaneSqlCommand.setTop(  new Label("Enter an SQL Command"));
				 borderPaneSqlCommand.setCenter(
				 new ScrollPane(tasqlCommand));
				borderPaneSqlCommand.setBottom(
				 hBoxSQLCommand);
				
				 HBox hBoxConnectionCommand = new HBox(10);
				 hBoxConnectionCommand.getChildren().addAll(
				 vBoxConnection, borderPaneSqlCommand);
				 
				  
				  borderPaneExecutionResult.setTop(  new Label("SQL Execution Result"));
				  borderPaneExecutionResult.setCenter(taSQLResult);
				 borderPaneExecutionResult.setBottom(btClearSQLResult);
				 
				  BorderPane borderPane = new BorderPane();
				  borderPane.setTop(hBoxConnectionCommand);
				  borderPane.setCenter(borderPaneExecutionResult);	
				  
				  
				  Scene scene = new Scene(borderPane, 670, 400);
				  primaryStage.setTitle("SQLClient"); // Set the stage title
				  primaryStage.setScene(scene); // Place the scene in the stage
				  primaryStage.show(); // Display the stage
				  
				btConnectDB.setOnAction(e -> connectToDB());
				  btExecuteSQL.setOnAction(e -> executeSQL());
				  btClearSQLCommand.setOnAction(e -> tasqlCommand.setText(null));
				  btClearSQLResult.setOnAction(e -> taSQLResult.setText(null));
				   }
				  
				  private void connectToDB(){
					  
	String driver = cboDriver.getSelectionModel().getSelectedItem();
	String url = cboURL.getSelectionModel().getSelectedItem();
	String username = tfUsername.getText().trim();
	String password = pfPassword.getText().trim();
	try {
		Class.forName(driver);
	connection = DriverManager.getConnection(
	url, username, password);
	lblConnectionStatus.setText("Connected to " + url);
	}
		catch (java.lang.Exception ex) {
		 ex.printStackTrace();
		 }
		}
		
		private void executeSQL(){
			if(connection ==null){
				taSQLResult.setText("Please connect first");
			
			return;
		}
			else{
				String sqlCommands = tasqlCommand.getText().trim();
				String[] commands = sqlCommands.replace('\n', ' ').split(";");
				for (String aCommand: commands) {				
					if (aCommand.trim().toUpperCase().startsWith("SELECT")) {
						processSQLSelect(aCommand);
					}
					else{
						processSQLNonSelect(aCommand);
					}
					}
	
				
			}
	
					  
				  }
				 
		private void processSQLSelect(String sqlCommand){
			borderPaneExecutionResult.getChildren().remove(taSQLResult);
			borderPaneExecutionResult.setCenter(tableView);
			try{
				
				statement = connection.createStatement();
				ResultSet resultSet = statement.executeQuery(sqlCommand);
				
				populateTableView(resultSet, tableView);
			} catch(SQLException ex){
				ex.printStackTrace();
			}
		}
		
		private void populateTableView(ResultSet rs, TableView tableView) {
		    ObservableList<ObservableList> data = FXCollections.observableArrayList();
		    try {
		     
		      for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
		       
		        final int j = i;
		        TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));


		        col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
		            if (param == null || param.getValue() == null || param.getValue().get(j) == null) {
		              return null;
		            }
		            return new SimpleStringProperty(param.getValue().get(j).toString());
		          }
		        });

		        tableView.getColumns().addAll(col);
		        System.out.println("Column [" + i + "] ");
		      }

		      
		      while (rs.next()) {
		        
		        ObservableList<String> row = FXCollections.observableArrayList();
		        for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
		        
		          row.add(rs.getString(i));
		        }
		        System.out.println("Row [1] added " + row);
		        data.add(row);

		      }

		     
		      tableView.setItems(data);
		    } catch (Exception e) {
		      e.printStackTrace();
		      System.out.println("Error on Building Data");
		    }
		  }

		private void processSQLNonSelect(String sqlCommand) {
		    borderPaneExecutionResult.getChildren().remove(tableView);
		    borderPaneExecutionResult.setCenter(taSQLResult);
		            
		    try {
		     
		      statement = connection.createStatement();

		     
		      statement.executeUpdate(sqlCommand);

		      taSQLResult.setText("SQL command executed");
		    }
		    catch (SQLException ex) {
		      taSQLResult.setText(ex.toString());
		    }
		  }

		  
		  public static void main(String[] args) {
		    launch(args);
		  }
		}
